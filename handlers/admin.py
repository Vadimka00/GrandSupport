from aiogram import Router, types, F
from aiogram.filters import Command
from database import crud
from services.cache import(
    get_user_cached,
    get_support_group_cached
)  
from database.models import SupportGroup

admin_router = Router()

@admin_router.message(Command("add_group"))
async def add_group_cmd(message: types.Message):
    user = await get_user_cached(message.from_user.id)
    
    if not user or user.role != "admin":
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    chat = message.chat
    group_id = chat.id
    title = chat.title or chat.full_name or chat.username or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —á–∞—Ç–∞
    photo_url = None
    try:
        chat_info = await message.bot.get_chat(chat.id)
        if chat_info.photo:
            file = await message.bot.get_file(chat_info.photo.big_file_id)
            photo_url = f"{file.file_path}"
    except Exception as e:
        photo_url = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –ë–î
    exists = await get_support_group_cached(group_id)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ
    await crud.create_or_update_support_group(
        group_id=group_id,
        title=title,
        photo_url=photo_url
    )

    if exists:
        await message.reply("üîÑ –ì—Ä—É–ø–ø–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await message.reply("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
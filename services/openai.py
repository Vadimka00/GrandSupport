import os
import json
import asyncio
from openai import AsyncOpenAI
from openai import OpenAIError, RateLimitError, APIError, Timeout
from dotenv import load_dotenv

load_dotenv()

openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

client = AsyncOpenAI(api_key=openai_api_key)

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
openai_semaphore = asyncio.Semaphore(5)

async def translate_with_gpt(text: str, lang_name: str, retries: int = 3, delay: float = 2.0) -> str:
    system_msg = (
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ –Ω–æ—Å–∏—Ç–µ–ª—å —è–∑—ã–∫–∞ ({lang_name}).\n"
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ {lang_name}.\n\n"
        f"–ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–∞–∫, –∫–∞–∫ —Å–∫–∞–∑–∞–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –†–∞–∑—Ä–µ—à—ë–Ω –ª—ë–≥–∫–∏–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –µ—Å–ª–∏ –æ–Ω —É–º–µ—Å—Ç–µ–Ω.\n\n"
        f"–í–∞–∂–Ω–æ:\n"
        f"- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –û—Ç–≤–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
    )

    async with openai_semaphore:  # üëà –∑–¥–µ—Å—å –ª–∏–º–∏—Ç concurrency
        for attempt in range(1, retries + 1):
            try:
                response = await client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": system_msg},
                        {"role": "user", "content": text}
                    ],
                    temperature=0.2
                )
                return response.choices[0].message.content.strip()
            except (RateLimitError, Timeout, APIError, OpenAIError) as e:
                if attempt == retries:
                    print(f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    return text
                await asyncio.sleep(delay * attempt)